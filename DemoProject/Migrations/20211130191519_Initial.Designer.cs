// <auto-generated />
using System;
using DemoProject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DemoProject.Migrations
{
    [DbContext(typeof(agcc_rd_testContext))]
    [Migration("20211130191519_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DemoProject.TestAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientRev")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContractorName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EngDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FooterName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Issue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PapeSize")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PurposeIssue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Rev")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RusDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Scale")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Sheet")
                        .HasColumnType("int");

                    b.Property<string>("StageEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StageRu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TotalSheets")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Test_Attributes");
                });

            modelBuilder.Entity("DemoProject.TestByte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Bytes")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Test_Bytes");
                });

            modelBuilder.Entity("DemoProject.TestCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Test_Checks");
                });

            modelBuilder.Entity("DemoProject.TestCheckResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CheckId")
                        .HasColumnType("int");

                    b.Property<string>("Desription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Test_CheckResults");
                });

            modelBuilder.Entity("DemoProject.TestDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TransmittalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransmittalId");

                    b.ToTable("Test_Documents");
                });

            modelBuilder.Entity("DemoProject.TestFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttributesId")
                        .HasColumnType("int");

                    b.Property<int>("ByteId")
                        .HasColumnType("int");

                    b.Property<int?>("CheckResultsId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("PageNumber")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AttributesId");

                    b.HasIndex("ByteId");

                    b.HasIndex("CheckResultsId");

                    b.HasIndex("DocumentId");

                    b.ToTable("Test_Files");
                });

            modelBuilder.Entity("DemoProject.TestTransmittal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contractor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransmittalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserUpload")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Test_Transmittals");
                });

            modelBuilder.Entity("DemoProject.TestDocument", b =>
                {
                    b.HasOne("DemoProject.TestTransmittal", "Transmittal")
                        .WithMany("TestDocuments")
                        .HasForeignKey("TransmittalId")
                        .HasConstraintName("FK_Test_Documents_Test_Transmittals")
                        .IsRequired();

                    b.Navigation("Transmittal");
                });

            modelBuilder.Entity("DemoProject.TestFile", b =>
                {
                    b.HasOne("DemoProject.TestAttribute", "Attributes")
                        .WithMany("TestFiles")
                        .HasForeignKey("AttributesId")
                        .HasConstraintName("FK_Test_Files_Test_Attributes");

                    b.HasOne("DemoProject.TestByte", "Byte")
                        .WithMany("TestFiles")
                        .HasForeignKey("ByteId")
                        .HasConstraintName("FK_Test_Files_Test_Bytes")
                        .IsRequired();

                    b.HasOne("DemoProject.TestCheckResult", "CheckResults")
                        .WithMany("TestFiles")
                        .HasForeignKey("CheckResultsId")
                        .HasConstraintName("FK_Test_Files_Test_CheckResults");

                    b.HasOne("DemoProject.TestDocument", "Document")
                        .WithMany("TestFiles")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("FK_Test_Files_Test_Documents")
                        .IsRequired();

                    b.Navigation("Attributes");

                    b.Navigation("Byte");

                    b.Navigation("CheckResults");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DemoProject.TestAttribute", b =>
                {
                    b.Navigation("TestFiles");
                });

            modelBuilder.Entity("DemoProject.TestByte", b =>
                {
                    b.Navigation("TestFiles");
                });

            modelBuilder.Entity("DemoProject.TestCheckResult", b =>
                {
                    b.Navigation("TestFiles");
                });

            modelBuilder.Entity("DemoProject.TestDocument", b =>
                {
                    b.Navigation("TestFiles");
                });

            modelBuilder.Entity("DemoProject.TestTransmittal", b =>
                {
                    b.Navigation("TestDocuments");
                });
#pragma warning restore 612, 618
        }
    }
}
